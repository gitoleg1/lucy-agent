name: CI

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Show env versions (pre)
        run: |
          python -V
          pip -V
          python - <<'PY'
          import ssl, sys, platform
          print("OPENSSL:", ssl.OPENSSL_VERSION)
          print("platform:", sys.platform, platform.platform())
          PY

      - name: Prepare artifact folders
        run: |
          mkdir -p artifact_ci/logs

      - name: Pip diagnostics (pre)
        continue-on-error: true
        run: |
          python -m pip debug > artifact_ci/logs/pip-debug.txt 2>&1 || true
          pip config list -v > artifact_ci/logs/pip-config.txt 2>&1 || true

      - name: Install deps (capture logs; no greenlet)
        id: install
        shell: bash
        run: |
          set -Eeuo pipefail
          sed -i '/^\s*greenlet\b/d' requirements*.txt || true
          { pip install -r requirements.txt ; echo $? > artifact_ci/logs/install.rc ; } \
            > artifact_ci/logs/pip-install.out 2> artifact_ci/logs/pip-install.err || true
          pip freeze > artifact_ci/logs/pip-freeze.txt || true

      - name: Upload artifacts (always - post install)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: artifact_ci/**
          if-no-files-found: warn
          retention-days: 7
          overwrite: true

      - name: Fail if install failed
        shell: bash
        run: |
          RC="$(cat artifact_ci/logs/install.rc || echo 1)"
          echo "install.rc=$RC"
          if [ "$RC" -ne 0 ]; then
            echo "pip install failed with rc=$RC"
            exit 1
          fi

      - name: Lint (ruff & black) — capture logs
        shell: bash
        run: |
          set -Eeuo pipefail
          # פולבק: אם אין requirements-dev.txt נתקין רף/בלק ידנית
          if [[ -f requirements-dev.txt ]]; then
            pip install -r requirements-dev.txt || true
          fi
          ruff --version || pip install ruff
          black --version || pip install black

          : > artifact_ci/logs/lint.out
          {
            echo "== Ruff (ruff check .) ==========="
            ruff check . || EXIT_RUFF=$?
            echo "== Black (black --check .) ======="
            black --check . || EXIT_BLACK=$?
            echo "Ruff RC=${EXIT_RUFF:-0}  Black RC=${EXIT_BLACK:-0}"
            if [ "${EXIT_RUFF:-0}" -ne 0 ] || [ "${EXIT_BLACK:-0}" -ne 0 ]; then
              exit 2
            fi
          } 2>&1 | tee -a artifact_ci/logs/lint.out

      - name: Run tests (pytest + health)
        env:
          PYTHONPATH: src
        shell: bash
        run: |
          pytest -q --maxfail=1 -k "health or smoke" 2>&1 | tee artifact_ci/logs/pytest.out

      - name: Upload artifacts (final - always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: artifact_ci/**
          if-no-files-found: warn
          retention-days: 7
          overwrite: true
