name: CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
          jq --version

      - name: Pre-create artifacts dirs (always)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/json artifacts/logs
          : > /tmp/api.out || true

      - name: Install deps (robust)
        shell: bash
        run: |
          set -euxo pipefail
          python -V
          which python
          python -m venv .venv
          source .venv/bin/activate
          hash -r
          python -V
          which python
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt || true
          fi
          # בסיסיים ל־API
          python -m pip install uvicorn fastapi
          # אם זה פרויקט פייתון — התקנה ב־editable לייבוא יציב
          if [ -f pyproject.toml ] || [ -f setup.cfg ]; then
            python -m pip install -e . || true
          fi

      - name: Discover project layout (for logs)
        shell: bash
        run: |
          set -euxo pipefail
          echo "PWD=$(pwd)"
          ls -la
          if [ -d src ]; then
            echo "=== src tree (first 200) ==="
            find src -maxdepth 2 -type f | sort | sed -n '1,200p'
          fi

      - name: Import sanity (lucy_agent.main)
        shell: bash
        run: |
          set -euxo pipefail
          source .venv/bin/activate
          if [ -d src ]; then export PYTHONPATH="src:${PYTHONPATH:-}"; fi
          # ננסה לייבא ונדפיס נתיב וגרסאות — לא מפיל את ה־build
          {
            python - <<'PY'
import sys, importlib, pkgutil, traceback, os, platform
print("Python:", sys.version)
print("Platform:", platform.platform())
print("sys.path[0..5]:", sys.path[:6])
try:
    m = importlib.import_module("lucy_agent.main")
    import inspect
    print("Imported:", m.__name__)
    print("File:", inspect.getsourcefile(m) or inspect.getfile(m))
    # ודא שקיים app
    app = getattr(m, "app", None)
    print("Has app:", bool(app))
except Exception as e:
    print("IMPORT_ERROR:", e)
    traceback.print_exc()
PY
          } > artifacts/logs/import_sanity.txt 2>&1 || true
          sed -n '1,200p' artifacts/logs/import_sanity.txt || true

      - name: Boot API (background) + wait for /health
        env:
          APP_MODULE: lucy_agent.main:app
        shell: bash
        run: |
          set -euxo pipefail
          source .venv/bin/activate

          # אם יש src/ נוסיף ל־PYTHONPATH וגם נשתמש ב־--app-dir
          APP_DIR_ARGS=()
          if [ -d src ]; then
            export PYTHONPATH="src:${PYTHONPATH:-}"
            APP_DIR_ARGS=(--app-dir src)
          fi

          # לשחרר פורט אם תפוס
          fuser -k 8000/tcp || true

          # נריץ בפרונט, ננתק לרקע, ונבדוק מיד אם מת
          python -m uvicorn "${APP_DIR_ARGS[@]}" "${APP_MODULE}" --host 127.0.0.1 --port 8000 \
            > /tmp/api.out 2>&1 & echo $! > /tmp/api.pid

          sleep 2
          if ! ps -p "$(cat /tmp/api.pid)" >/dev/null 2>&1; then
            echo "API died immediately. Dumping /tmp/api.out:" >&2
            echo "==== /tmp/api.out ====" >&2
            cat /tmp/api.out >&2 || true
            exit 1
          fi

          # להמתין עד 90 שניות ל־/health
          for i in {1..90}; do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              curl -fsS http://127.0.0.1:8000/health
              exit 0
            fi
            sleep 1
          done

          echo "ERROR: API /health did not become ready in time" >&2
          echo "==== tail /tmp/api.out ====" >&2
          tail -n +1 /tmp/api.out >&2 || true
          exit 1

      - name: Run smoke v11 (auto health-only fallback)
        env:
          AGENT_API_KEY: ${{ secrets.AGENT_API_KEY || 'ChangeMe_SuperSecret_Long' }}
        shell: bash
        run: |
          set -euxo pipefail
          source .venv/bin/activate
          bash scripts/autopilot_smoke_suite_v11.sh || true
          if grep -Eq "SMOKE v11 — הושלם בהצלחה|Health-only ✅" artifacts/logs/smoke.log 2>/dev/null; then
            echo "::notice::Smoke indicates success (either full or health-only)"
          else
            echo "::warning::No success indicator in smoke.log (check artifacts)"
          fi

      - name: Stop API (best-effort)
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -f /tmp/api.pid ]]; then
            kill "$(cat /tmp/api.pid)" 2>/dev/null || true
            sleep 1
          fi
          fuser -k 8000/tcp || true

      - name: Upload smoke artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          if-no-files-found: warn
          path: |
            artifacts/**
            /tmp/api.out

      - name: Debug tails on failure
        if: failure()
        shell: bash
        run: |
          echo "==== /tmp/api.out ===="
          tail -n 400 /tmp/api.out 2>/dev/null || echo "no /tmp/api.out"
          echo "==== artifacts/logs/import_sanity.txt ===="
          sed -n '1,200p' artifacts/logs/import_sanity.txt 2>/dev/null || echo "no import_sanity.txt"
          echo "==== artifacts/logs/smoke.log ===="
          sed -n '1,200p' artifacts/logs/smoke.log 2>/dev/null || echo "no artifacts/logs/smoke.log"
