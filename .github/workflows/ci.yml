name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  packages: read
  metadata: read

env:
  PYTHONUNBUFFERED: "1"
  PYTHONFAULTHANDLER: "1"
  PYTHONPATH: src
  APP_MODULE: lucy_agent.main:app
  HOST: 127.0.0.1
  PORT: 8000
  SMOKE_ARTIFACT: smoke-artifacts

jobs:
  ci:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          check-latest: false

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          jq --version || { sudo apt-get update -y && sudo apt-get install -y jq; }
          jq --version

      - name: Pre-create artifact dirs (always)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/json artifacts/logs artifacts/tmp
          : > /tmp/api.out || true
          : > /tmp/api_control.out || true

      - name: Install deps
        shell: bash
        run: |
          set -euxo pipefail
          python -m venv .venv
          ./.venv/bin/python -m pip install --upgrade pip
          ./.venv/bin/python -m pip install -r requirements.txt
          ./.venv/bin/python -m pip install fastapi uvicorn

      - name: Import sanity (src-layout)
        shell: bash
        run: |
          set -euo pipefail
          ./.venv/bin/python - <<'PY'
          import importlib
          m = importlib.import_module("lucy_agent.main")
          assert hasattr(m, "app"), "lucy_agent.main must expose FastAPI 'app'"
          print("import sanity: OK")
          PY

      - name: Diagnostics — env info & pip freeze
        shell: bash
        run: |
          set -euo pipefail
          python --version | tee artifacts/logs/python-version.txt
          uname -a | tee artifacts/logs/uname.txt
          ./.venv/bin/python - <<'PY' | tee artifacts/logs/py-pkgs.txt
          import sys, platform
          print("py:", sys.version)
          print("platform:", platform.platform())
          try:
              import fastapi, starlette, uvicorn
              print("fastapi:", fastapi.__version__)
              print("starlette:", starlette.__version__)
              print("uvicorn:", uvicorn.__version__)
          except Exception as e:
              print("pkg import error:", e)
          try:
              import greenlet
              print("greenlet:", greenlet.__version__)
          except Exception as e:
              print("greenlet: not installed", e)
          PY
          ./.venv/bin/python -m pip freeze | tee artifacts/logs/pip-freeze.txt

      - name: Control run — run uvicorn (allow fail, capture logs)
        shell: bash
        continue-on-error: true
        run: |
          set -euxo pipefail
          ( ./.venv/bin/python -m uvicorn --app-dir src "${APP_MODULE}" \
              --host "${HOST}" --port "${PORT}" \
              --loop asyncio --http h11 \
              --no-access-log --log-level debug > /tmp/api_control.out 2>&1 ) || true
          sleep 1 || true
          cp -f /tmp/api_control.out artifacts/tmp/api_control.out 2>/dev/null || true

      - name: Hotfix deps for CI (avoid segfaults on runner)
        shell: bash
        run: |
          set -euxo pipefail
          ./.venv/bin/python -m pip uninstall -y greenlet || true
          ./.venv/bin/python -m pip install "uvicorn==0.30.6"
          ./.venv/bin/python - <<'PY'
          import sys, platform
          import fastapi, starlette, uvicorn
          print("py:", sys.version)
          print("platform:", platform.platform())
          print("fastapi:", fastapi.__version__)
          print("starlette:", starlette.__version__)
          print("uvicorn:", uvicorn.__version__)
          try:
              import greenlet
              print("greenlet still present:", greenlet.__version__)
          except Exception:
              print("greenlet: not installed (ok)")
          PY

      - name: Boot API (background) + wait for /health
        shell: bash
        run: |
          set -euxo pipefail
          ./.venv/bin/python -m uvicorn --app-dir src "${APP_MODULE}" \
            --host "${HOST}" --port "${PORT}" \
            --loop asyncio --http h11 > /tmp/api.out 2>&1 &
          echo $! > /tmp/api.pid

          for i in $(seq 1 40); do
            if curl -fsS "http://${HOST}:${PORT}/health" | jq -e '.status=="ok"' >/dev/null 2>&1; then
              echo "health: OK"
              exit 0
            fi
            sleep 0.5
          done

          echo "FAILED: /health did not respond in time" >&2
          echo "==== tail /tmp/api.out ====" >&2
          tail -n 200 /tmp/api.out >&2 || true
          exit 1

      - name: Stop API (best-effort)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f /tmp/api.pid ]]; then
            kill "$(cat /tmp/api.pid)" 2>/dev/null || true
            sleep 1 || true
          fi
          fuser -k ${PORT}/tcp || true

      - name: Debug tails on failure
        if: failure()
        shell: bash
        run: |
          echo "==== tail /tmp/api.out ===="
          tail -n 200 /tmp/api.out 2>/dev/null || echo "no /tmp/api.out"

      - name: Package artifacts
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          cp -f /tmp/api.out artifacts/tmp/api.out 2>/dev/null || true
          cp -f /tmp/api_control.out artifacts/tmp/api_control.out 2>/dev/null || true

      - name: Upload smoke artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SMOKE_ARTIFACT }}
          path: artifacts/**
          if-no-files-found: warn
