name: CI

on:
  push:
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-24.04
    env:
      PYTHONUNBUFFERED: "1"
      PYTHONFAULTHANDLER: "1"
      PYTHONPATH: src
      APP_MODULE: lucy_agent.main:app
      HOST: 127.0.0.1
      PORT: "8000"
      SMOKE_ARTIFACT: smoke-artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
          jq --version

      - name: Pre-create artifacts dirs (always)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/json artifacts/logs
          : > /tmp/api.out || true

      - name: Install deps (robust)
        shell: bash
        run: |
          set -euxo pipefail
          python -m venv .venv
          ./.venv/bin/python -m pip install --upgrade pip

          # דרישות הפרויקט (אם ריק/לא קיים לא מפילים את ה-CI)
          ( [ -f requirements.txt ] && ./.venv/bin/python -m pip install -r requirements.txt ) || true

          # תיקון קריסת greenlet בסביבת ubuntu-24.04 אם צריך
          ./.venv/bin/python - <<'PY'
          import pkgutil, subprocess, sys
          need_pin = (pkgutil.find_loader("greenlet") is None)
          if not need_pin:
              import importlib
              v = importlib.metadata.version("greenlet")
              need_pin = v.startswith(("3.1.", "3.2."))  # גרסאות שדיווחו על בעיות
          if need_pin:
              subprocess.check_call([sys.executable, "-m", "pip", "install", "greenlet==3.0.3"])
          print("greenlet pin check: OK")
          PY

          # מבטיחים FastAPI + Uvicorn זמינים
          ./.venv/bin/python -m pip install fastapi uvicorn

      - name: Capture env (for artifacts)
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "python: $(./.venv/bin/python -V)"
            echo "uvicorn: $(./.venv/bin/uvicorn --version || echo 'n/a')"
            echo "pip freeze:"
            ./.venv/bin/python -m pip freeze || true
            echo
            echo "uname -a:"
            uname -a
            echo
            echo "lsb_release -a || /etc/os-release:"
            (lsb_release -a || cat /etc/os-release) 2>/dev/null || true
          } > artifacts/logs/env.txt

      - name: Import sanity (src-layout)
        shell: bash
        env:
          PYTHONPATH: src
        run: |
          set -euo pipefail
          ./.venv/bin/python - <<'PY'
          import importlib
          m = importlib.import_module("lucy_agent.main")
          assert hasattr(m, "app"), "lucy_agent.main חייב להכיל app של FastAPI"
          print("import sanity: OK")
          PY

      - name: Boot API (background) + wait for /health
        shell: bash
        env:
          PYTHONPATH: src
        run: |
          set -euxo pipefail
          # הפעלה ברקע דרך המודול של uvicorn מתוך ה-venv
          ./.venv/bin/python -m uvicorn --app-dir src "${APP_MODULE}" \
            --host "${HOST}" --port "${PORT}" > /tmp/api.out 2>&1 &
          echo $! > /tmp/api.pid

          # המתנה ל-health
          for i in $(seq 1 40); do
            if curl -fsS "http://${HOST}:${PORT}/health" | jq -e '.status=="ok"' >/dev/null 2>&1; then
              echo "health: OK"
              exit 0
            fi
            sleep 0.5
          done

          echo "❌ לא עלה /health בזמן" >&2
          echo "==== tail /tmp/api.out ====" >&2
          tail -n 200 /tmp/api.out >&2 || true
          exit 1

      - name: Stop API (best-effort)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f /tmp/api.pid ]]; then
            kill "$(cat /tmp/api.pid)" 2>/dev/null || true
            sleep 1 || true
          fi
          # ודאו שהפורט סגור
          fuser -k ${PORT}/tcp || true

      - name: Debug tails on failure
        if: failure()
        shell: bash
        run: |
          echo "==== tail /tmp/api.out ===="
          tail -n 200 /tmp/api.out 2>/dev/null || echo "no /tmp/api.out"
          echo "==== smoke.log (first 200 lines) ===="
          sed -n '1,200p' artifacts/logs/smoke.log 2>/dev/null || echo "no artifacts/logs/smoke.log"

      - name: Upload smoke artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SMOKE_ARTIFACT }}
          if-no-files-found: warn
          path: |
            artifacts/**
            /tmp/api.out
