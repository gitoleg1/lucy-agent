name: CI

on:
  push:

jobs:
  ci:
    runs-on: ubuntu-24.04
    env:
      PYTHONUNBUFFERED: "1"
      PYTHONFAULTHANDLER: "1"
      PYTHONPATH: src
      PYTHONNOUSERSITE: "1"   # למנוע זיהום מסביבת המשתמש
      SMOKE_ARTIFACT: smoke-artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Prepare artifact dirs (always)
        run: |
          set -euo pipefail
          mkdir -p artifacts/logs artifacts/tmp
          : > artifacts/logs/pip-install.out || true
          : > artifacts/logs/pip-freeze.txt || true
          : > artifacts/logs/pytest.out || true
          python -V | tee artifacts/logs/python-version.txt
          uname -a | tee artifacts/logs/uname.txt

      - name: Install deps (capture full pip logs)
        run: |
          set -euxo pipefail
          python -m venv .venv
          ./.venv/bin/python -m pip install --upgrade pip setuptools wheel
          # נתקין עם עדיפות לבינארי ונאגור לוג מפורט לארטיפקטים
          (.venv/bin/python -m pip install --prefer-binary -r requirements.txt -vvv) \
            2>&1 | tee artifacts/logs/pip-install.out
          # וידוא שאין greenlet
          ./.venv/bin/python - <<'PY'
          import importlib
          print("greenlet_present=", bool(importlib.util.find_spec("greenlet")))
          PY
          # צילום מצב חבילות + בדיקת תאימות תלויות
          ./.venv/bin/python -m pip freeze | tee artifacts/logs/pip-freeze.txt
          ./.venv/bin/python -m pip check | tee -a artifacts/logs/pip-install.out

      - name: Import sanity (src-layout)
        run: |
          set -euo pipefail
          ./.venv/bin/python - <<'PY'
          import importlib
          m = importlib.import_module("lucy_agent.main")
          assert hasattr(m, "app"), "lucy_agent.main חייב להכיל app של FastAPI"
          print("import sanity: OK")
          PY

      - name: Run tests (pytest)
        id: pytest_run
        continue-on-error: true
        run: |
          set -euxo pipefail
          ./.venv/bin/python -m pytest -q | tee artifacts/logs/pytest.out
          echo "exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SMOKE_ARTIFACT }}
          path: artifacts/**
          if-no-files-found: warn

      - name: Fail if pytest failed
        if: steps.pytest_run.outputs.exit_code != '0'
        run: |
          echo "pytest failed (exit=${{ steps.pytest_run.outputs.exit_code }})"
          exit 1
