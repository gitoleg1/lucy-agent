from __future__ import annotations
from enum import Enum
from datetime import datetime
from typing import Any, Optional

# -------- SQLAlchemy ORM --------
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import String, Text, Integer, ForeignKey, JSON, DateTime
from .db import Base

class Task(Base):
    __tablename__ = "tasks"
    id: Mapped[str] = mapped_column(String(64), primary_key=True)
    title: Mapped[str] = mapped_column(String(255))
    status: Mapped[str] = mapped_column(String(32))
    created_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    started_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    ended_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    steps: Mapped[list["Step"]] = relationship(
        "Step", back_populates="task", cascade="all, delete-orphan"
    )

class Step(Base):
    __tablename__ = "steps"
    id: Mapped[str] = mapped_column(String(64), primary_key=True)
    task_id: Mapped[str] = mapped_column(
        String(64), ForeignKey("tasks.id", ondelete="CASCADE"), index=True
    )
    type: Mapped[str] = mapped_column(String(32))
    params: Mapped[dict | None] = mapped_column(JSON)
    status: Mapped[str] = mapped_column(String(32))
    started_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    ended_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    exit_code: Mapped[int | None] = mapped_column(Integer, nullable=True)
    stdout: Mapped[str | None] = mapped_column(Text, nullable=True)
    stderr: Mapped[str | None] = mapped_column(Text, nullable=True)

    task: Mapped["Task"] = relationship("Task", back_populates="steps")

class EventLog(Base):
    __tablename__ = "event_logs"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    task_id: Mapped[str] = mapped_column(String(64), index=True)
    ts: Mapped[datetime] = mapped_column(DateTime, index=True)
    event_type: Mapped[str] = mapped_column(String(32))  # heartbeat | update | done | created
    payload: Mapped[dict | None] = mapped_column(JSON)

# -------- Compatibility (what main.py imports) --------
# Enum for step types
class StepType(str, Enum):
    shell = "shell"
    # הוסף כאן בעתיד סוגים נוספים (http, python, וכו') לפי הצורך

# Pydantic models for request/response (kept for backward-compat with your routers)
from pydantic import BaseModel, Field

class StepCreate(BaseModel):
    type: StepType
    params: dict[str, Any] = Field(default_factory=dict)

class TaskCreate(BaseModel):
    title: str
    steps: list[StepCreate]

class StepView(BaseModel):
    id: str
    type: StepType | str
    params: dict[str, Any] | None = None
    status: str
    started_at: Optional[datetime] = None
    ended_at: Optional[datetime] = None
    exit_code: Optional[int] = None
    stdout: Optional[str] = None
    stderr: Optional[str] = None

class TaskView(BaseModel):
    id: str
    title: str
    status: str
    created_at: Optional[datetime] = None
    started_at: Optional[datetime] = None
    ended_at: Optional[datetime] = None
    steps: list[StepView] = Field(default_factory=list)
